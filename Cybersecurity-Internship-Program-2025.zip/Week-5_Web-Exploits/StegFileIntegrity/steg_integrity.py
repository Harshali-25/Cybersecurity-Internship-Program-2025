import sys
import hashlib
from PIL import Image

# ------------------ Generate SHA256 Hash ------------------
def generate_hash(file_path):
    hasher = hashlib.sha256()
    with open(file_path, "rb") as f:
        while chunk := f.read(4096):
            hasher.update(chunk)
    return hasher.hexdigest()

# ------------------ Embed Hash into Image ------------------
def embed_hash(cover_img, hash_str, stego_img):
    img = Image.open(cover_img)
    binary_hash = ''.join(format(ord(c), '08b') for c in hash_str)
    pixels = list(img.getdata())

    new_pixels = []
    hash_index = 0

    for pixel in pixels:
        r, g, b = pixel[:3]
        if hash_index < len(binary_hash):
            r = (r & ~1) | int(binary_hash[hash_index])  # Put bit in Red channel
            hash_index += 1
        new_pixels.append((r, g, b))

    img.putdata(new_pixels)
    img.save(stego_img)
    print(f"[+] Hash embedded into {stego_img}")

# ------------------ Extract Hash from Image ------------------
def extract_hash(stego_img, hash_len=64):
    img = Image.open(stego_img)
    pixels = list(img.getdata())

    bits = ""
    for pixel in pixels:
        r, g, b = pixel[:3]
        bits += str(r & 1)
        if len(bits) >= hash_len * 8:
            break

    extracted = ""
    for i in range(0, len(bits), 8):
        extracted += chr(int(bits[i:i+8], 2))
    return extracted

# ------------------ Verify File Integrity ------------------
def verify(file_path, stego_img):
    current_hash = generate_hash(file_path)
    hidden_hash = extract_hash(stego_img)

    print(f"Hidden hash:  {hidden_hash}")
    print(f"Current hash: {current_hash}")

    if current_hash == hidden_hash:
        print("[SAFE] File is original")
    else:
        print("[ALERT] File has been modified")

# ------------------ Main Program ------------------
if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("Usage: python steg_integrity.py <mode> [args]")
        print("Modes: genhash, embed, extract, verify")
        sys.exit(1)

    mode = sys.argv[1]

    if mode == "genhash":
        print(generate_hash(sys.argv[2]))

    elif mode == "embed":
        file_to_protect = sys.argv[2]
        cover_img = sys.argv[3]
        stego_img = sys.argv[4]
        hash_val = generate_hash(file_to_protect)
        embed_hash(cover_img, hash_val, stego_img)

    elif mode == "extract":
        print(extract_hash(sys.argv[2]))

    elif mode == "verify":
        verify(sys.argv[2], sys.argv[3])
